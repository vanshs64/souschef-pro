import './components/styles/Carousel.css';
import { useLocation } from 'react-router-dom';
import { useState, useEffect } from "react";
import { ChevronLeft, ChevronRight, Clock, Users } from 'lucide-react';

interface Recipe {
  title: string;
  total_time: number;
  yields: string;
  ingredients: string[];
  instructions: Array<[string, (string | string[])[]]>;
}

const RecipeCarousel = () => {
  const location = useLocation();
  const recipe: Recipe | undefined = location.state;

  const [currentStep, setCurrentStep] = useState(0);
  const [steps, setSteps] = useState<{ id: number; title: string; section: string; steps: string[] }[]>([]);

  useEffect(() => {
    if (!recipe?.instructions) return;

    const parseInstructions = (instructions: Array<[string, (string | string[])[]]>) => {
      let parsedSteps: { id: number; title: string; section: string; steps: string[] }[] = [];
      let stepCounter = 1;

      instructions.forEach(([sectionTitle, content]) => {
        if (Array.isArray(content)) {
          content.forEach(subContent => {
            if (typeof subContent === 'string') {
              parsedSteps.push({
                id: stepCounter++,
                title: sectionTitle,
                section: sectionTitle,
                steps: subContent.split(/(?<=\.)\s+/).map(s => s.trim()).filter(s => s.length > 0),
              });
            } else if (Array.isArray(subContent)) {
              parsedSteps.push({
                id: stepCounter++,
                title: sectionTitle,
                section: sectionTitle,
                steps: subContent.flatMap(step =>
                  typeof step === 'string'
                    ? step.split(/(?<=\.)\s+/).map(s => s.trim()).filter(s => s.length > 0)
                    : []
                ),
              });
            }
          });
        }
      });

      return parsedSteps;
    };

    setSteps(parseInstructions(recipe.instructions));
  }, [recipe?.instructions]);

  const nextStep = () => setCurrentStep((prev) => (prev + 1) % steps.length);
  const prevStep = () => setCurrentStep((prev) => (prev - 1 + steps.length) % steps.length);

  if (!recipe) {
    return (
      <div className="recipe-page">
        <div className="loading">No recipe data found.</div>
      </div>
    );
  }

  return (
    <div className="recipe-page">
      {/* Recipe Header */}
      <div className="recipe-header">
        <h1 className="recipe-title">{recipe.title}</h1>
        <div className="recipe-meta">
          <div className="meta-item">
            <Clock className="meta-icon" />
            <span>{recipe.totalTime} mins</span>
          </div>
          <div className="meta-item">
            <Users className="meta-icon" />
            <span>{recipe.yields}</span>
          </div>
        </div>
      </div>

      <div className="content-wrapper">
        {/* Ingredients Sidebar */}
        <div className="ingredients-sidebar">
          <div className="ingredients-card">
            <h2 className="ingredients-title">Ingredients</h2>
            <ul className="ingredients-list">
                {recipe.ingredients.map((ingredient: string, idx: number) => (
                <li key={idx}>{ingredient}</li>
                ))}
            </ul>
          </div>
        </div>

        {/* Carousel Section */}
        <div className="carousel-section">
          <div className="carousel-card">
            {/* Progress Indicator */}
            <div className="progress-container">
              <div className="progress-header">
                <span className="progress-text">
                  Step {currentStep + 1} of {steps.length}
                </span>
                <span className="progress-text">
                  {steps[currentStep]?.section}
                </span>
              </div>
              <div className="progress-bar">
                <div
                  className="progress-fill"
                  style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
                />
              </div>
            </div>

            {/* Step Content */}
            <div className="step-content">
              <h3 className="step-title">
                {steps[currentStep]?.title}
              </h3>
              <ul className="step-list">
                {steps[currentStep]?.steps.map((step, idx) => (
                  <li key={idx}>
                    <span className="step-bullet">â€¢</span>
                    {step}
                  </li>
                ))}
              </ul>
            </div>

            {/* Navigation */}
            <div className="navigation">
              <button
                onClick={prevStep}
                className="nav-button prev"
                disabled={currentStep === 0}
              >
                <ChevronLeft />
                Previous
              </button>
              <div className="step-dots">
                {steps.map((_, idx) => (
                  <button
                    key={idx}
                    onClick={() => setCurrentStep(idx)}
                    className={`step-dot ${idx === currentStep ? 'active' : ''}`}
                  />
                ))}
              </div>
              <button
                onClick={nextStep}
                className="nav-button next"
                disabled={currentStep === steps.length - 1}
              >
                Next
                <ChevronRight />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RecipeCarousel;

# chatgpt